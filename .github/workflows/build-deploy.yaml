name: Build and Deploy Flask App

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Enable Debug Logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Debug AWS Credentials
        run: |
          echo "Checking AWS credentials environment variables..."
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: [REDACTED]"
          echo "AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN"
          echo "AWS_REGION: $AWS_REGION"

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 932346273027.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: 932346273027.dkr.ecr.us-east-1.amazonaws.com/flaskapp-awsec2:latest

      - name: Deploy to EC2
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Adding SSH private key..."
          echo "$SSH_PRIVATE_KEY" > vockey.pem
          chmod 400 vockey.pem
          echo "Connecting to EC2 instance..."
          ssh -o StrictHostKeyChecking=no -i vockey.pem ec2-user@$EC2_PUBLIC_IP "
            echo 'Pulling Docker image...'
            docker pull 932346273027.dkr.ecr.us-east-1.amazonaws.com/flaskapp-awsec2:latest
            echo 'Stopping existing container (if it exists)...'
            docker ps -q --filter 'name=flaskapp-awsec2' | grep -q . && docker stop flaskapp-awsec2 || echo 'Container does not exist, skipping stop.'
            echo 'Removing existing container (if it exists)...'
            docker ps -a -q --filter 'name=flaskapp-awsec2' | grep -q . && docker rm flaskapp-awsec2 || echo 'Container does not exist, skipping remove.'
            echo 'Starting new container...'
            docker run -d -p 5000:5000 --name flaskapp-awsec2 932346273027.dkr.ecr.us-east-1.amazonaws.com/flaskapp-awsec2:latest
          "